version: '3.8'

services:
  # 前端服务 (Nginx)
  frontend:
    image: nginx:alpine
    ports:
      - '80:80'
      - '443:443'
    volumes:
      - ./frontend/dist:/usr/share/nginx/html:ro
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - ./logs/nginx:/var/log/nginx
    depends_on:
      - backend
      - lowcode-platform
    networks:
      - soybean-admin
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: '0.5'
        reservations:
          memory: 128M
          cpus: '0.25'

  # 基础系统后端
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile.prod
    environment:
      TZ: Asia/Shanghai
      NODE_ENV: production
      PORT: 9528
      # 数据库配置
      DATABASE_URL: 'postgresql://soybean:${POSTGRES_PASSWORD}@postgres:5432/soybean-admin-nest-backend?schema=public'
      # Redis配置
      REDIS_HOST: 'redis'
      REDIS_PORT: 6379
      REDIS_PASSWORD: '${REDIS_PASSWORD}'
      REDIS_DB: 1
      # JWT配置
      JWT_SECRET: '${JWT_SECRET}'
      JWT_EXPIRE_IN: 3600
      REFRESH_TOKEN_SECRET: '${REFRESH_TOKEN_SECRET}'
      REFRESH_TOKEN_EXPIRE_IN: 7200
      # 性能配置
      METRICS_ENABLED: 'true'
      HEALTH_CHECK_ENABLED: 'true'
      LOG_LEVEL: 'warn'
      # CORS配置
      CORS_ENABLED: 'true'
      CORS_ORIGIN: '${CORS_ORIGIN}'
      CORS_METHODS: 'GET,HEAD,PUT,PATCH,POST,DELETE,OPTIONS'
      CORS_CREDENTIALS: 'true'
      CORS_MAX_AGE: 3600
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - soybean-admin
    volumes:
      - ./logs/backend:/app/logs
    healthcheck:
      test: ["CMD", "curl", "-f", "http://backend:9528/v1/route/getConstantRoutes"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    deploy:
      replicas: 2
      resources:
        limits:
          memory: 1G
          cpus: '1.0'
        reservations:
          memory: 512M
          cpus: '0.5'
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3
        window: 120s

  # 低代码平台后端
  lowcode-platform:
    build:
      context: ./lowcode-platform-backend
      dockerfile: Dockerfile.prod
    environment:
      TZ: Asia/Shanghai
      NODE_ENV: production
      PORT: 3000
      # 数据库配置
      DATABASE_URL: 'postgresql://soybean:${POSTGRES_PASSWORD}@postgres:5432/soybean-admin-nest-backend?schema=public'
      # Redis配置
      REDIS_HOST: 'redis'
      REDIS_PORT: 6379
      REDIS_PASSWORD: '${REDIS_PASSWORD}'
      REDIS_DB: 2
      # JWT配置
      JWT_SECRET: '${JWT_SECRET}'
      BASE_SYSTEM_URL: 'http://backend:9528'
      # 性能和监控配置
      METRICS_ENABLED: 'true'
      HEALTH_CHECK_ENABLED: 'true'
      PERFORMANCE_MONITORING: 'true'
      LOG_LEVEL: 'warn'
      # 代码生成配置
      CODE_GENERATION_ENABLED: 'true'
      MAX_GENERATION_SIZE: '10MB'
      GENERATION_TIMEOUT: '300000'
      # CORS配置
      CORS_ENABLED: 'true'
      CORS_ORIGIN: '${CORS_ORIGIN}'
      CORS_METHODS: 'GET,HEAD,PUT,PATCH,POST,DELETE,OPTIONS'
      CORS_CREDENTIALS: 'true'
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      backend:
        condition: service_healthy
    networks:
      - soybean-admin
    volumes:
      - ./generated-code:/app/generated
      - ./logs/lowcode:/app/logs
      - ./uploads:/app/uploads
      - ./examples:/app/examples:ro
    healthcheck:
      test: ["CMD", "curl", "-f", "http://lowcode-platform:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    deploy:
      replicas: 2
      resources:
        limits:
          memory: 2G
          cpus: '2.0'
        reservations:
          memory: 1G
          cpus: '1.0'
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3
        window: 120s

  # PostgreSQL数据库
  postgres:
    image: postgres:16.3
    environment:
      TZ: Asia/Shanghai
      POSTGRES_DB: soybean-admin-nest-backend
      POSTGRES_USER: soybean
      POSTGRES_PASSWORD: '${POSTGRES_PASSWORD}'
      POSTGRES_INITDB_ARGS: '--encoding=UTF-8 --lc-collate=C --lc-ctype=C'
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database/init:/docker-entrypoint-initdb.d:ro
      - ./logs/postgres:/var/log/postgresql
    networks:
      - soybean-admin
    ports:
      - '5432:5432'
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U soybean -d soybean-admin-nest-backend"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    deploy:
      resources:
        limits:
          memory: 2G
          cpus: '2.0'
        reservations:
          memory: 1G
          cpus: '1.0'
    restart: unless-stopped
    command: >
      postgres
      -c max_connections=200
      -c shared_buffers=256MB
      -c effective_cache_size=1GB
      -c maintenance_work_mem=64MB
      -c checkpoint_completion_target=0.9
      -c wal_buffers=16MB
      -c default_statistics_target=100
      -c random_page_cost=1.1
      -c effective_io_concurrency=200
      -c work_mem=4MB
      -c min_wal_size=1GB
      -c max_wal_size=4GB
      -c max_worker_processes=8
      -c max_parallel_workers_per_gather=4
      -c max_parallel_workers=8
      -c max_parallel_maintenance_workers=4
      -c log_destination=stderr
      -c logging_collector=on
      -c log_directory=/var/log/postgresql
      -c log_filename=postgresql-%Y-%m-%d_%H%M%S.log
      -c log_min_duration_statement=1000

  # Redis缓存
  redis:
    image: redis:7.2-alpine
    environment:
      TZ: Asia/Shanghai
    volumes:
      - redis_data:/data
      - ./redis/redis.conf:/usr/local/etc/redis/redis.conf:ro
      - ./logs/redis:/var/log/redis
    networks:
      - soybean-admin
    ports:
      - '6379:6379'
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5
      start_period: 30s
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.5'
        reservations:
          memory: 256M
          cpus: '0.25'
    restart: unless-stopped
    command: redis-server /usr/local/etc/redis/redis.conf --requirepass ${REDIS_PASSWORD}

  # Prometheus监控
  prometheus:
    image: prom/prometheus:latest
    ports:
      - '9090:9090'
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    networks:
      - soybean-admin
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.5'

  # Grafana仪表板
  grafana:
    image: grafana/grafana:latest
    ports:
      - '3001:3000'
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD}
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources:ro
    networks:
      - soybean-admin
    depends_on:
      - prometheus
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: '0.5'

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local

networks:
  soybean-admin:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
