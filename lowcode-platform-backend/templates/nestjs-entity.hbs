import { Entity, PrimaryGeneratedColumn, Column, CreateDateColumn, UpdateDateColumn{{#if hasRelations}}, {{#each relations}}{{#if @first}}{{/if}}{{relationType}}{{#unless @last}}, {{/unless}}{{/each}}{{/if}} } from 'typeorm';
{{#if hasRelations}}
{{#each relations}}
import { {{targetEntity}} } from './{{kebabCase targetEntity}}.entity';
{{/each}}
{{/if}}

@Entity('{{tableName}}')
export class {{entityName}} {
  @PrimaryGeneratedColumn('uuid')
  id: string;

{{#if enableTenancy}}
  @Column({ name: 'tenant_id', type: 'uuid', nullable: true })
  tenantId?: string;

{{/if}}
{{#each fields}}
{{#unless isPrimaryKey}}
  @Column({
    name: '{{snakeCase code}}',
    type: '{{mapTypeToTypeORM type}}',
    {{#if length}}length: {{length}},{{/if}}
    {{#if nullable}}nullable: true,{{else}}nullable: false,{{/if}}
    {{#if defaultValue}}default: {{#if (eq type 'STRING')}}'{{defaultValue}}'{{else}}{{defaultValue}}{{/if}},{{/if}}
    {{#if description}}comment: '{{description}}',{{/if}}
    {{#if isUnique}}unique: true,{{/if}}
  })
  {{code}}: {{mapTypeToTS type}}{{#if nullable}} | null{{/if}};

{{/unless}}
{{/each}}
{{#if hasRelations}}
{{#each relations}}
  {{#if (eq relationType 'OneToOne')}}
  @OneToOne(() => {{targetEntity}}, {{targetEntity.toLowerCase}} => {{targetEntity.toLowerCase}}.{{sourceField}})
  {{relationName}}: {{targetEntity}};

  {{/if}}
  {{#if (eq relationType 'OneToMany')}}
  @OneToMany(() => {{targetEntity}}, {{targetEntity.toLowerCase}} => {{targetEntity.toLowerCase}}.{{sourceField}})
  {{relationName}}: {{targetEntity}}[];

  {{/if}}
  {{#if (eq relationType 'ManyToOne')}}
  @ManyToOne(() => {{targetEntity}}, {{targetEntity.toLowerCase}} => {{targetEntity.toLowerCase}}.{{targetField}})
  {{relationName}}: {{targetEntity}};

  {{/if}}
  {{#if (eq relationType 'ManyToMany')}}
  @ManyToMany(() => {{targetEntity}}, {{targetEntity.toLowerCase}} => {{targetEntity.toLowerCase}}.{{targetField}})
  @JoinTable({
    name: '{{junctionTable}}',
    joinColumn: { name: '{{sourceJoinColumn}}', referencedColumnName: 'id' },
    inverseJoinColumn: { name: '{{targetJoinColumn}}', referencedColumnName: 'id' },
  })
  {{relationName}}: {{targetEntity}}[];

  {{/if}}
{{/each}}
{{/if}}
{{#if enableAudit}}
  @Column({ name: 'created_by', type: 'varchar', length: 100, nullable: true })
  createdBy?: string;

  @Column({ name: 'updated_by', type: 'varchar', length: 100, nullable: true })
  updatedBy?: string;

{{/if}}
  @CreateDateColumn({ name: 'created_at' })
  createdAt: Date;

  @UpdateDateColumn({ name: 'updated_at' })
  updatedAt: Date;

{{#if enableSoftDelete}}
  @Column({ name: 'deleted_at', type: 'timestamp', nullable: true })
  deletedAt?: Date;

{{/if}}
{{#if enableStatus}}
  @Column({ name: 'status', type: 'varchar', length: 20, default: 'ACTIVE' })
  status: string;

{{/if}}
{{#if enableVersioning}}
  @Column({ name: 'version', type: 'int', default: 1 })
  version: number;

{{/if}}
}
