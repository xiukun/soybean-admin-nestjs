{{!-- 
Amis Controller模板
用于生成符合Amis规范的NestJS控制器
--}}
import {
  Controller,
  Get,
  Post,
  Put,
  Delete,
  Body,
  Param,
  Query,
  HttpCode,
  HttpStatus,
  UseGuards,
  UseInterceptors,
  ParseIntPipe,
  ValidationPipe,
} from '@nestjs/common';
import {
  ApiTags,
  ApiOperation,
  ApiResponse,
  ApiParam,
  ApiQuery,
  ApiBearerAuth,
} from '@nestjs/swagger';
import { JwtAuthGuard } from '@/shared/guards/jwt-auth.guard';
import { TransformInterceptor } from '@/shared/interceptors/transform.interceptor';
import { LoggingInterceptor } from '@/shared/interceptors/logging.interceptor';
{{#if config.enableDataPermission}}
import { DataPermissionGuard } from '@/shared/guards/data-permission.guard';
{{/if}}
import { {{pascalCase entity.code}}Service } from '../services/{{entity.code}}.service';
import {
  Create{{pascalCase entity.code}}Dto,
  Update{{pascalCase entity.code}}Dto,
  Query{{pascalCase entity.code}}Dto,
  {{pascalCase entity.code}}ResponseDto,
} from '../dto';

/**
 * {{entity.description}}控制器
 * 提供符合Amis规范的CRUD接口
 */
@ApiTags('{{entity.description}}管理')
@Controller('{{apiPath}}')
@UseGuards(JwtAuthGuard{{#if config.enableDataPermission}}, DataPermissionGuard{{/if}})
@UseInterceptors(TransformInterceptor, LoggingInterceptor)
@ApiBearerAuth()
export class {{className}} {
  constructor(
    private readonly {{serviceName}}: {{pascalCase entity.code}}Service,
  ) {}

  /**
   * 获取{{entity.description}}列表
   * 支持分页、搜索、排序、筛选
   */
  @Get()
  @ApiOperation({
    summary: '获取{{entity.description}}列表',
    description: '支持分页、搜索、排序、筛选功能，返回符合Amis规范的数据格式',
  })
  @ApiQuery({ name: 'page', required: false, description: '页码，从1开始', example: 1 })
  @ApiQuery({ name: 'perPage', required: false, description: '每页数量，最大{{pageSizeLimit}}', example: 10 })
  @ApiQuery({ name: 'orderBy', required: false, description: '排序字段', example: 'createdAt' })
  @ApiQuery({ name: 'orderDir', required: false, description: '排序方向', enum: ['asc', 'desc'], example: 'desc' })
  {{#each entity.fields}}
  {{#if this.searchable}}
  @ApiQuery({ name: '{{this.name}}', required: false, description: '{{this.description}}筛选' })
  {{/if}}
  {{/each}}
  @ApiResponse({
    status: 200,
    description: '获取成功',
    schema: {
      type: 'object',
      properties: {
        status: { type: 'number', example: 0 },
        msg: { type: 'string', example: 'success' },
        data: {
          type: 'object',
          properties: {
            items: {
              type: 'array',
              items: { $ref: '#/components/schemas/{{pascalCase entity.code}}ResponseDto' },
            },
            total: { type: 'number', example: 100 },
            page: { type: 'number', example: 1 },
            perPage: { type: 'number', example: 10 },
            totalPages: { type: 'number', example: 10 },
          },
        },
      },
    },
  })
  async findAll(@Query(ValidationPipe) query: Query{{pascalCase entity.code}}Dto) {
    // 限制每页数量
    if (query.perPage && query.perPage > {{pageSizeLimit}}) {
      query.perPage = {{pageSizeLimit}};
    }

    const result = await this.{{serviceName}}.findAll(query);
    
    return {
      status: 0,
      msg: 'success',
      data: {
        items: result.items,
        total: result.total,
        page: query.page || 1,
        perPage: query.perPage || 10,
        totalPages: Math.ceil(result.total / (query.perPage || 10)),
      },
    };
  }

  /**
   * 获取{{entity.description}}详情
   */
  @Get(':id')
  @ApiOperation({
    summary: '获取{{entity.description}}详情',
    description: '根据ID获取{{entity.description}}的详细信息',
  })
  @ApiParam({ name: 'id', description: '{{entity.description}}ID' })
  @ApiResponse({
    status: 200,
    description: '获取成功',
    type: {{pascalCase entity.code}}ResponseDto,
  })
  @ApiResponse({ status: 404, description: '{{entity.description}}不存在' })
  async findOne(@Param('id') id: string) {
    const item = await this.{{serviceName}}.findOne(id);
    
    return {
      status: 0,
      msg: 'success',
      data: item,
    };
  }

  /**
   * 创建{{entity.description}}
   */
  @Post()
  @HttpCode(HttpStatus.CREATED)
  @ApiOperation({
    summary: '创建{{entity.description}}',
    description: '创建新的{{entity.description}}记录',
  })
  @ApiResponse({
    status: 201,
    description: '创建成功',
    type: {{pascalCase entity.code}}ResponseDto,
  })
  @ApiResponse({ status: 400, description: '请求参数错误' })
  @ApiResponse({ status: 409, description: '{{entity.description}}已存在' })
  async create(@Body(ValidationPipe) createDto: Create{{pascalCase entity.code}}Dto) {
    const item = await this.{{serviceName}}.create(createDto);
    
    return {
      status: 0,
      msg: '{{entity.description}}创建成功',
      data: item,
    };
  }

  /**
   * 更新{{entity.description}}
   */
  @Put(':id')
  @ApiOperation({
    summary: '更新{{entity.description}}',
    description: '根据ID更新{{entity.description}}信息',
  })
  @ApiParam({ name: 'id', description: '{{entity.description}}ID' })
  @ApiResponse({
    status: 200,
    description: '更新成功',
    type: {{pascalCase entity.code}}ResponseDto,
  })
  @ApiResponse({ status: 400, description: '请求参数错误' })
  @ApiResponse({ status: 404, description: '{{entity.description}}不存在' })
  async update(
    @Param('id') id: string,
    @Body(ValidationPipe) updateDto: Update{{pascalCase entity.code}}Dto,
  ) {
    const item = await this.{{serviceName}}.update(id, updateDto);
    
    return {
      status: 0,
      msg: '{{entity.description}}更新成功',
      data: item,
    };
  }

  {{#if config.enableSoftDelete}}
  /**
   * 软删除{{entity.description}}
   */
  @Delete(':id')
  @ApiOperation({
    summary: '删除{{entity.description}}',
    description: '软删除{{entity.description}}（标记为已删除，不实际删除数据）',
  })
  @ApiParam({ name: 'id', description: '{{entity.description}}ID' })
  @ApiResponse({ status: 200, description: '删除成功' })
  @ApiResponse({ status: 404, description: '{{entity.description}}不存在' })
  async remove(@Param('id') id: string) {
    await this.{{serviceName}}.remove(id);
    
    return {
      status: 0,
      msg: '{{entity.description}}删除成功',
      data: null,
    };
  }

  /**
   * 恢复已删除的{{entity.description}}
   */
  @Put(':id/restore')
  @ApiOperation({
    summary: '恢复{{entity.description}}',
    description: '恢复已软删除的{{entity.description}}',
  })
  @ApiParam({ name: 'id', description: '{{entity.description}}ID' })
  @ApiResponse({ status: 200, description: '恢复成功' })
  @ApiResponse({ status: 404, description: '{{entity.description}}不存在' })
  async restore(@Param('id') id: string) {
    const item = await this.{{serviceName}}.restore(id);
    
    return {
      status: 0,
      msg: '{{entity.description}}恢复成功',
      data: item,
    };
  }
  {{else}}
  /**
   * 删除{{entity.description}}
   */
  @Delete(':id')
  @ApiOperation({
    summary: '删除{{entity.description}}',
    description: '永久删除{{entity.description}}记录',
  })
  @ApiParam({ name: 'id', description: '{{entity.description}}ID' })
  @ApiResponse({ status: 200, description: '删除成功' })
  @ApiResponse({ status: 404, description: '{{entity.description}}不存在' })
  async remove(@Param('id') id: string) {
    await this.{{serviceName}}.remove(id);
    
    return {
      status: 0,
      msg: '{{entity.description}}删除成功',
      data: null,
    };
  }
  {{/if}}

  /**
   * 批量删除{{entity.description}}
   */
  @Delete('batch')
  @ApiOperation({
    summary: '批量删除{{entity.description}}',
    description: '批量删除多个{{entity.description}}记录',
  })
  @ApiResponse({ status: 200, description: '批量删除成功' })
  async batchRemove(@Body() body: { ids: string[] }) {
    const { ids } = body;
    
    if (!ids || !Array.isArray(ids) || ids.length === 0) {
      return {
        status: 1,
        msg: '请选择要删除的{{entity.description}}',
        data: null,
      };
    }

    const result = await this.{{serviceName}}.batchRemove(ids);
    
    return {
      status: 0,
      msg: `成功删除 ${result.count} 个{{entity.description}}`,
      data: { deletedCount: result.count },
    };
  }

  {{#if config.generateStats}}
  /**
   * 获取{{entity.description}}统计信息
   */
  @Get('stats/overview')
  @ApiOperation({
    summary: '获取{{entity.description}}统计',
    description: '获取{{entity.description}}的统计信息，用于仪表板展示',
  })
  @ApiResponse({
    status: 200,
    description: '获取成功',
    schema: {
      type: 'object',
      properties: {
        status: { type: 'number', example: 0 },
        msg: { type: 'string', example: 'success' },
        data: {
          type: 'object',
          properties: {
            total: { type: 'number', description: '总数量' },
            todayCount: { type: 'number', description: '今日新增' },
            weekCount: { type: 'number', description: '本周新增' },
            monthCount: { type: 'number', description: '本月新增' },
          },
        },
      },
    },
  })
  async getStats() {
    const stats = await this.{{serviceName}}.getStats();
    
    return {
      status: 0,
      msg: 'success',
      data: stats,
    };
  }
  {{/if}}

  {{#if config.generateImportExport}}
  /**
   * 导出{{entity.description}}
   */
  @Get('export')
  @ApiOperation({
    summary: '导出{{entity.description}}',
    description: '导出{{entity.description}}数据为Excel文件',
  })
  @ApiQuery({ name: 'format', required: false, enum: ['xlsx', 'csv'], description: '导出格式' })
  async export(@Query() query: Query{{pascalCase entity.code}}Dto & { format?: 'xlsx' | 'csv' }) {
    const result = await this.{{serviceName}}.export(query);
    
    return {
      status: 0,
      msg: '导出成功',
      data: {
        downloadUrl: result.downloadUrl,
        filename: result.filename,
      },
    };
  }

  /**
   * 导入{{entity.description}}
   */
  @Post('import')
  @ApiOperation({
    summary: '导入{{entity.description}}',
    description: '从Excel文件导入{{entity.description}}数据',
  })
  async import(@Body() body: { fileUrl: string; options?: any }) {
    const result = await this.{{serviceName}}.import(body.fileUrl, body.options);
    
    return {
      status: 0,
      msg: '导入完成',
      data: {
        successCount: result.successCount,
        failureCount: result.failureCount,
        errors: result.errors,
      },
    };
  }
  {{/if}}
}
