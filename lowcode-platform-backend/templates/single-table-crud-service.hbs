{{!-- 
单表CRUD Service模板
用于生成标准的CRUD服务
--}}
import { Injectable, NotFoundException, ConflictException, BadRequestException } from '@nestjs/common';
import { PrismaService } from '@/shared/prisma/prisma.service';
{{#if config.enableCache}}
import { CacheService } from '@/shared/cache/cache.service';
{{/if}}
{{#if config.enableDataPermission}}
import { DataPermissionService } from '@/shared/services/data-permission.service';
{{/if}}
{{#if config.enableAuditLog}}
import { AuditLogService } from '@/shared/services/audit-log.service';
{{/if}}
import {
  {{#if (includes enabledOperations 'create')}}
  Create{{pascalCase entity.code}}Dto,
  {{/if}}
  {{#if (includes enabledOperations 'update')}}
  Update{{pascalCase entity.code}}Dto,
  {{/if}}
  {{#if (includes enabledOperations 'search')}}
  Query{{pascalCase entity.code}}Dto,
  {{/if}}
  {{#if (includes enabledOperations 'read')}}
  {{pascalCase entity.code}}ResponseDto,
  {{/if}}
} from '../dto';
import { {{pascalCase entity.code}} } from '../entities/{{entity.code}}.entity';

/**
 * {{entity.description}}服务
 * 提供{{entity.description}}的CRUD业务逻辑
 */
@Injectable()
export class {{className}} {
  {{#if config.enableCache}}
  private readonly cachePrefix = '{{entity.code}}';
  private readonly cacheTtl = {{config.cacheTtl}};
  {{/if}}

  constructor(
    private readonly prisma: PrismaService,
    {{#if config.enableCache}}
    private readonly cacheService: CacheService,
    {{/if}}
    {{#if config.enableDataPermission}}
    private readonly dataPermissionService: DataPermissionService,
    {{/if}}
    {{#if config.enableAuditLog}}
    private readonly auditLogService: AuditLogService,
    {{/if}}
  ) {}

  {{#if (includes enabledOperations 'read')}}
  /**
   * 获取{{entity.description}}列表
   */
  async findAll(query: Query{{pascalCase entity.code}}Dto): Promise<{
    data: {{pascalCase entity.code}}ResponseDto[];
    total: number;
  }> {
    const {
      page = 1,
      limit = 10,
      {{#if (includes enabledOperations 'sort')}}
      sortBy = 'createdAt',
      sortOrder = 'DESC',
      {{/if}}
      {{#if (includes enabledOperations 'search')}}
      search,
      {{/if}}
      ...filters
    } = query;

    {{#if config.enableCache}}
    // 尝试从缓存获取
    const cacheKey = `${this.cachePrefix}:list:${JSON.stringify(query)}`;
    const cached = await this.cacheService.get(cacheKey);
    if (cached) {
      return cached;
    }
    {{/if}}

    // 构建查询条件
    const where: any = {};

    {{#if config.enableSoftDelete}}
    // 软删除过滤
    where.deletedAt = null;
    {{/if}}

    {{#if (includes enabledOperations 'search')}}
    // 搜索条件
    if (search) {
      where.OR = [
        {{#each searchableFields}}
        {{#if (eq this.type 'string')}}
        {
          {{this.name}}: {
            contains: search,
            mode: 'insensitive',
          },
        },
        {{/if}}
        {{/each}}
      ];
    }
    {{/if}}

    // 筛选条件
    {{#each filterableFields}}
    if (filters.{{this.name}} !== undefined && filters.{{this.name}} !== null && filters.{{this.name}} !== '') {
      {{#if (eq this.type 'string')}}
      where.{{this.name}} = {
        contains: filters.{{this.name}},
        mode: 'insensitive',
      };
      {{else}}
      where.{{this.name}} = filters.{{this.name}};
      {{/if}}
    }
    {{/each}}

    {{#if config.enableDataPermission}}
    // 应用数据权限
    const dataPermissionWhere = await this.dataPermissionService.applyDataPermission(
      '{{entity.code}}',
      where
    );
    Object.assign(where, dataPermissionWhere);
    {{/if}}

    // 排序条件
    {{#if (includes enabledOperations 'sort')}}
    const orderBy: any = {};
    if (sortBy && this.isValidSortField(sortBy)) {
      orderBy[sortBy] = sortOrder.toLowerCase();
    } else {
      orderBy.createdAt = 'desc';
    }
    {{/if}}

    // 执行查询
    const [data, total] = await Promise.all([
      this.prisma.{{camelCase entity.code}}.findMany({
        where,
        {{#if (includes enabledOperations 'sort')}}
        orderBy,
        {{/if}}
        skip: (page - 1) * limit,
        take: limit,
        {{#if entity.relationships}}
        include: {
          {{#each entity.relationships}}
          {{this.field}}: true,
          {{/each}}
        },
        {{/if}}
      }),
      this.prisma.{{camelCase entity.code}}.count({ where }),
    ]);

    const result = {
      data: data.map(item => this.toResponseDto(item)),
      total,
    };

    {{#if config.enableCache}}
    // 缓存结果
    await this.cacheService.set(cacheKey, result, this.cacheTtl);
    {{/if}}

    return result;
  }

  /**
   * 获取{{entity.description}}详情
   */
  async findOne(id: string): Promise<{{pascalCase entity.code}}ResponseDto> {
    {{#if config.enableCache}}
    // 尝试从缓存获取
    const cacheKey = `${this.cachePrefix}:${id}`;
    const cached = await this.cacheService.get(cacheKey);
    if (cached) {
      return cached;
    }
    {{/if}}

    const where: any = { id };

    {{#if config.enableSoftDelete}}
    where.deletedAt = null;
    {{/if}}

    {{#if config.enableDataPermission}}
    // 应用数据权限
    const dataPermissionWhere = await this.dataPermissionService.applyDataPermission(
      '{{entity.code}}',
      where
    );
    Object.assign(where, dataPermissionWhere);
    {{/if}}

    const item = await this.prisma.{{camelCase entity.code}}.findFirst({
      where,
      {{#if entity.relationships}}
      include: {
        {{#each entity.relationships}}
        {{this.field}}: true,
        {{/each}}
      },
      {{/if}}
    });

    if (!item) {
      throw new NotFoundException('{{entity.description}}不存在');
    }

    const result = this.toResponseDto(item);

    {{#if config.enableCache}}
    // 缓存结果
    await this.cacheService.set(cacheKey, result, this.cacheTtl);
    {{/if}}

    return result;
  }
  {{/if}}

  {{#if (includes enabledOperations 'create')}}
  /**
   * 创建{{entity.description}}
   */
  async create(createDto: Create{{pascalCase entity.code}}Dto): Promise<{{pascalCase entity.code}}ResponseDto> {
    // 数据验证
    await this.validateCreateData(createDto);

    try {
      const item = await this.prisma.{{camelCase entity.code}}.create({
        data: {
          ...createDto,
          createdAt: new Date(),
          updatedAt: new Date(),
        },
        {{#if entity.relationships}}
        include: {
          {{#each entity.relationships}}
          {{this.field}}: true,
          {{/each}}
        },
        {{/if}}
      });

      {{#if config.enableCache}}
      // 清除相关缓存
      await this.clearCache();
      {{/if}}

      {{#if config.enableAuditLog}}
      // 记录审计日志
      await this.auditLogService.log({
        action: 'CREATE',
        resource: '{{entity.code}}',
        resourceId: item.id,
        data: createDto,
      });
      {{/if}}

      return this.toResponseDto(item);
    } catch (error) {
      if (error.code === 'P2002') {
        const field = error.meta?.target?.[0];
        throw new ConflictException(`${field ? this.getFieldLabel(field) : '数据'}已存在`);
      }
      throw error;
    }
  }
  {{/if}}

  {{#if (includes enabledOperations 'update')}}
  /**
   * 更新{{entity.description}}
   */
  async update(id: string, updateDto: Update{{pascalCase entity.code}}Dto): Promise<{{pascalCase entity.code}}ResponseDto> {
    // 检查记录是否存在
    const existingItem = await this.findOne(id);

    // 数据验证
    await this.validateUpdateData(id, updateDto);

    try {
      const item = await this.prisma.{{camelCase entity.code}}.update({
        where: { id },
        data: {
          ...updateDto,
          updatedAt: new Date(),
        },
        {{#if entity.relationships}}
        include: {
          {{#each entity.relationships}}
          {{this.field}}: true,
          {{/each}}
        },
        {{/if}}
      });

      {{#if config.enableCache}}
      // 清除相关缓存
      await this.clearCache(id);
      {{/if}}

      {{#if config.enableAuditLog}}
      // 记录审计日志
      await this.auditLogService.log({
        action: 'UPDATE',
        resource: '{{entity.code}}',
        resourceId: id,
        oldData: existingItem,
        newData: updateDto,
      });
      {{/if}}

      return this.toResponseDto(item);
    } catch (error) {
      if (error.code === 'P2002') {
        const field = error.meta?.target?.[0];
        throw new ConflictException(`${field ? this.getFieldLabel(field) : '数据'}已存在`);
      }
      throw error;
    }
  }
  {{/if}}

  {{#if (includes enabledOperations 'delete')}}
  /**
   * 删除{{entity.description}}
   */
  async remove(id: string): Promise<void> {
    // 检查记录是否存在
    const existingItem = await this.findOne(id);

    {{#if config.enableSoftDelete}}
    await this.prisma.{{camelCase entity.code}}.update({
      where: { id },
      data: {
        deletedAt: new Date(),
        updatedAt: new Date(),
      },
    });
    {{else}}
    await this.prisma.{{camelCase entity.code}}.delete({
      where: { id },
    });
    {{/if}}

    {{#if config.enableCache}}
    // 清除相关缓存
    await this.clearCache(id);
    {{/if}}

    {{#if config.enableAuditLog}}
    // 记录审计日志
    await this.auditLogService.log({
      action: 'DELETE',
      resource: '{{entity.code}}',
      resourceId: id,
      oldData: existingItem,
    });
    {{/if}}
  }
  {{/if}}

  {{#if (includes enabledOperations 'batch')}}
  /**
   * 批量删除{{entity.description}}
   */
  async batchRemove(ids: string[]): Promise<{ count: number }> {
    if (!ids || ids.length === 0) {
      throw new BadRequestException('请选择要删除的{{entity.description}}');
    }

    {{#if config.enableSoftDelete}}
    const result = await this.prisma.{{camelCase entity.code}}.updateMany({
      where: {
        id: { in: ids },
        deletedAt: null,
      },
      data: {
        deletedAt: new Date(),
        updatedAt: new Date(),
      },
    });
    {{else}}
    const result = await this.prisma.{{camelCase entity.code}}.deleteMany({
      where: {
        id: { in: ids },
      },
    });
    {{/if}}

    {{#if config.enableCache}}
    // 清除相关缓存
    await this.clearCache();
    {{/if}}

    {{#if config.enableAuditLog}}
    // 记录审计日志
    await this.auditLogService.log({
      action: 'BATCH_DELETE',
      resource: '{{entity.code}}',
      data: { ids, count: result.count },
    });
    {{/if}}

    return { count: result.count };
  }

  {{#if config.enableSoftDelete}}
  /**
   * 批量恢复{{entity.description}}
   */
  async batchRestore(ids: string[]): Promise<{ count: number }> {
    if (!ids || ids.length === 0) {
      throw new BadRequestException('请选择要恢复的{{entity.description}}');
    }

    const result = await this.prisma.{{camelCase entity.code}}.updateMany({
      where: {
        id: { in: ids },
        deletedAt: { not: null },
      },
      data: {
        deletedAt: null,
        updatedAt: new Date(),
      },
    });

    {{#if config.enableCache}}
    // 清除相关缓存
    await this.clearCache();
    {{/if}}

    {{#if config.enableAuditLog}}
    // 记录审计日志
    await this.auditLogService.log({
      action: 'BATCH_RESTORE',
      resource: '{{entity.code}}',
      data: { ids, count: result.count },
    });
    {{/if}}

    return { count: result.count };
  }
  {{/if}}
  {{/if}}

  {{#if (includes enabledOperations 'export')}}
  /**
   * 导出{{entity.description}}
   */
  async export(
    query: Partial<Query{{pascalCase entity.code}}Dto>,
    options: {
      format?: 'xlsx' | 'csv';
      fields?: string[];
    } = {}
  ): Promise<{
    downloadUrl: string;
    filename: string;
    fileSize: number;
  }> {
    // 获取所有数据（不分页）
    const { data } = await this.findAll({ ...query, page: 1, limit: 999999 });

    // 生成导出文件
    const format = options.format || 'xlsx';
    const timestamp = new Date().toISOString().split('T')[0];
    const filename = `{{entity.code}}_export_${timestamp}.${format}`;
    
    // TODO: 实现具体的导出逻辑
    // 这里应该调用文件服务生成Excel或CSV文件
    
    return {
      downloadUrl: `/api/files/download/${filename}`,
      filename,
      fileSize: 0, // 实际文件大小
    };
  }
  {{/if}}

  {{#if (includes enabledOperations 'import')}}
  /**
   * 导入{{entity.description}}
   */
  async import(
    fileUrl: string,
    options: {
      skipHeader?: boolean;
      updateExisting?: boolean;
    } = {}
  ): Promise<{
    successCount: number;
    failureCount: number;
    errors: string[];
    warnings: string[];
  }> {
    // TODO: 实现具体的导入逻辑
    // 1. 下载并解析文件
    // 2. 验证数据格式
    // 3. 批量插入或更新数据
    // 4. 返回导入结果

    return {
      successCount: 0,
      failureCount: 0,
      errors: [],
      warnings: [],
    };
  }
  {{/if}}

  /**
   * 验证创建数据
   */
  private async validateCreateData(createDto: Create{{pascalCase entity.code}}Dto): Promise<void> {
    {{#each uniqueFields}}
    // 检查{{this.description}}是否已存在
    if (createDto.{{this.name}}) {
      const existing = await this.prisma.{{camelCase ../entity.code}}.findFirst({
        where: {
          {{this.name}}: createDto.{{this.name}},
          {{#if ../config.enableSoftDelete}}
          deletedAt: null,
          {{/if}}
        },
      });

      if (existing) {
        throw new ConflictException('{{this.description}}已存在');
      }
    }
    {{/each}}

    // 自定义验证逻辑
    await this.customValidateCreate(createDto);
  }

  /**
   * 验证更新数据
   */
  private async validateUpdateData(id: string, updateDto: Update{{pascalCase entity.code}}Dto): Promise<void> {
    {{#each uniqueFields}}
    // 检查{{this.description}}是否已存在
    if (updateDto.{{this.name}}) {
      const existing = await this.prisma.{{camelCase ../entity.code}}.findFirst({
        where: {
          {{this.name}}: updateDto.{{this.name}},
          id: { not: id },
          {{#if ../config.enableSoftDelete}}
          deletedAt: null,
          {{/if}}
        },
      });

      if (existing) {
        throw new ConflictException('{{this.description}}已存在');
      }
    }
    {{/each}}

    // 自定义验证逻辑
    await this.customValidateUpdate(id, updateDto);
  }

  /**
   * 自定义创建验证
   */
  private async customValidateCreate(createDto: Create{{pascalCase entity.code}}Dto): Promise<void> {
    // TODO: 实现自定义创建验证逻辑
  }

  /**
   * 自定义更新验证
   */
  private async customValidateUpdate(id: string, updateDto: Update{{pascalCase entity.code}}Dto): Promise<void> {
    // TODO: 实现自定义更新验证逻辑
  }

  {{#if (includes enabledOperations 'sort')}}
  /**
   * 验证排序字段
   */
  private isValidSortField(field: string): boolean {
    const validFields = [
      {{#each sortableFields}}
      '{{this.name}}',
      {{/each}}
      'createdAt',
      'updatedAt',
    ];
    return validFields.includes(field);
  }
  {{/if}}

  /**
   * 获取字段标签
   */
  private getFieldLabel(field: string): string {
    const fieldLabels: Record<string, string> = {
      {{#each fields}}
      {{this.name}}: '{{this.description}}',
      {{/each}}
    };
    return fieldLabels[field] || field;
  }

  {{#if config.enableCache}}
  /**
   * 清除缓存
   */
  private async clearCache(id?: string): Promise<void> {
    if (id) {
      await this.cacheService.del(`${this.cachePrefix}:${id}`);
    }
    await this.cacheService.delPattern(`${this.cachePrefix}:list:*`);
  }
  {{/if}}

  /**
   * 转换为响应DTO
   */
  private toResponseDto(item: any): {{pascalCase entity.code}}ResponseDto {
    return {
      {{#each fields}}
      {{this.name}}: item.{{this.name}},
      {{/each}}
      {{#if entity.relationships}}
      {{#each entity.relationships}}
      {{this.field}}: item.{{this.field}},
      {{/each}}
      {{/if}}
      createdAt: item.createdAt,
      updatedAt: item.updatedAt,
      {{#if config.enableSoftDelete}}
      deletedAt: item.deletedAt,
      {{/if}}
    };
  }
}
