import { BadRequestException, Inject } from '@nestjs/common';
import { CommandHandler, ICommandHandler } from '@nestjs/cqrs';
import { MenuType } from '@prisma/client';

import { ROOT_ROUTE_PID } from '@lib/shared/prisma/db.constant';

import { MenuCreateCommand } from '../../commands/menu-create.command';
import { MenuReadRepoPortToken, MenuWriteRepoPortToken } from '../../constants';
import { Menu } from '../../domain/menu.model';
import { MenuCreateProperties } from '../../domain/menu.read.model';
import { MenuReadRepoPort } from '../../ports/menu.read.repo-port';
import { MenuWriteRepoPort } from '../../ports/menu.write.repo-port';
import { LowcodePageIdGenerator } from '../../services/lowcode-page-id.generator';

@CommandHandler(MenuCreateCommand)
export class MenuCreateHandler
  implements ICommandHandler<MenuCreateCommand, void>
{
  @Inject(MenuWriteRepoPortToken)
  private readonly menuWriteRepository: MenuWriteRepoPort;
  @Inject(MenuReadRepoPortToken)
  private readonly menuReadRepoPort: MenuReadRepoPort;

  private readonly lowcodePageIdGenerator = new LowcodePageIdGenerator();

  async execute(command: MenuCreateCommand) {
    // Check if routeName already exists
    const existingMenu = await this.menuReadRepoPort.getMenuByRouteName(command.routeName);
    if (existingMenu) {
      throw new BadRequestException(
        `A menu with routeName '${command.routeName}' already exists.`,
      );
    }

    if (command.pid !== ROOT_ROUTE_PID) {
      const parentMenu = await this.menuReadRepoPort.getMenuById(command.pid);

      if (!parentMenu) {
        throw new BadRequestException(
          `Parent menu with code ${command.pid} does not exist.`,
        );
      }
    }

    // 自动生成低代码页面ID（如果菜单类型为lowcode）
    let finalLowcodePageId = command.lowcodePageId;
    if (command.menuType === MenuType.lowcode) {
      // 为低代码菜单自动生成页面ID
      finalLowcodePageId = this.lowcodePageIdGenerator.generateFromMenuName(command.menuName);
    }

    const menuCreateProperties: MenuCreateProperties = {
      //Tips: id is omitted as it will be auto-generated by the database
      menuName: command.menuName,
      menuType: command.menuType,
      routeName: command.routeName,
      routePath: command.routePath,
      component: command.component,
      status: command.status,
      pid: command.pid,
      order: command.order,
      constant: command.constant,
      createdAt: new Date(),
      createdBy: command.uid,
      iconType: command.iconType,
      icon: command.icon,
      pathParam: command.pathParam,
      activeMenu: command.activeMenu,
      hideInMenu: command.hideInMenu,
      i18nKey: command.i18nKey,
      keepAlive: command.keepAlive,
      href: command.href,
      multiTab: command.multiTab,
      lowcodePageId: finalLowcodePageId,
    };

    const menu = Menu.fromCreate(menuCreateProperties);
    await this.menuWriteRepository.save(menu);
  }
}
