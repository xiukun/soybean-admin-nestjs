// Backend Service - System Management Core
// This schema contains core system management tables for the backend service
// Other services should access these tables through API calls, not direct database access

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["multiSchema"]
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_DATABASE_URL")
  schemas   = ["backend"]
}

model SysTokens {
  id           String   @id @default(cuid())
  accessToken  String   @unique @map("access_token")
  refreshToken String   @unique @map("refresh_token")
  status       String
  userId       String   @map("user_id")
  username     String
  domain       String
  loginTime    DateTime @default(now()) @map("login_time")
  ip           String
  port         Int?
  address      String
  userAgent    String   @map("user_agent")
  requestId    String   @map("request_id")
  type         String
  createdAt    DateTime @default(now()) @map("created_at")
  createdBy    String   @map("created_by")

  @@map("sys_tokens")
  @@schema("backend")
}

// 用户表
model SysUser {
  id          String    @id
  username    String    @unique
  password    String
  domain      String
  built_in    Boolean   @default(false)
  avatar      String?
  email       String?   @unique
  phoneNumber String?   @unique @map("phone_number")
  nickName    String    @map("nick_name")
  status      Status

  tenantId     String?  @map("tenant_id")
  createdAt   DateTime  @default(now()) @map("created_at")
  createdBy   String    @map("created_by")
  updatedAt   DateTime? @updatedAt @map("updated_at")
  updatedBy   String?   @map("updated_by")

  tenant      Tenant?   @relation(fields: [tenantId], references: [id])

  @@map("sys_user")
  @@schema("backend")
}

enum Status {
  ENABLED
  DISABLED
  BANNED

  @@schema("backend")
}

// casbin_rule
model CasbinRule {
  id    Int     @id @default(autoincrement())
  ptype String
  v0    String?
  v1    String?
  v2    String?
  v3    String?
  v4    String?
  v5    String?

  @@map("casbin_rule")
  @@schema("backend")
}

// domain 租户/域
model SysDomain {
  id          String    @id
  code        String    @unique
  name        String
  description String?
  status      Status
  createdAt   DateTime  @default(now()) @map("created_at")
  createdBy   String    @map("created_by")
  updatedAt   DateTime? @updatedAt @map("updated_at")
  updatedBy   String?   @map("updated_by")

  @@map("sys_domain")
  @@schema("backend")
}

// 角色表
model SysRole {
  id          String    @id
  code        String    @unique
  name        String
  description String?
  pid         String    @default("0")
  status      Status
  createdAt   DateTime  @default(now()) @map("created_at")
  createdBy   String    @map("created_by")
  updatedAt   DateTime? @updatedAt @map("updated_at")
  updatedBy   String?   @map("updated_by")

  @@map("sys_role")
  @@schema("backend")
}

model SysUserRole {
  userId String @map("user_id")
  roleId String @map("role_id")

  @@id([userId, roleId])
  @@map("sys_user_role")
  @@schema("backend")
}

// 接口资源表
model SysEndpoint {
  id         String    @id
  path       String
  method     String
  action     String
  resource   String
  controller String
  summary    String?
  createdAt  DateTime  @default(now()) @map("created_at")
  updatedAt  DateTime? @updatedAt @map("updated_at")

  @@map("sys_endpoint")
  @@schema("backend")
}

// 组织机构
model SysOrganization {
  id          String    @id
  code        String    @unique
  name        String
  description String?
  pid         String    @default("0")
  status      Status
  createdAt   DateTime  @default(now()) @map("created_at")
  createdBy   String    @map("created_by")
  updatedAt   DateTime? @updatedAt @map("updated_at")
  updatedBy   String?   @map("updated_by")

  @@map("sys_organization")
  @@schema("backend")
}

model SysLoginLog {
  id        String   @id @default(cuid())
  userId    String   @map("user_id")
  username  String
  domain    String
  loginTime DateTime @default(now()) @map("login_time")
  ip        String
  port      Int?
  address   String
  userAgent String   @map("user_agent")
  requestId String   @map("request_id")
  type      String
  createdAt DateTime @default(now()) @map("created_at")
  createdBy String   @map("created_by")

  @@map("sys_login_log")
  @@schema("backend")
}

model SysOperationLog {
  id          String   @id @default(cuid())
  userId      String   @map("user_id")
  username    String
  domain      String
  moduleName  String   @map("module_name")
  description String
  requestId   String   @map("request_id")
  method      String
  url         String
  ip          String
  userAgent   String?  @map("user_agent")
  params      Json?    @map("params")
  body        Json?    @map("body")
  response    Json?    @map("response")
  startTime   DateTime @map("start_time")
  endTime     DateTime @map("end_time")
  duration    Int
  createdAt   DateTime @default(now()) @map("created_at")

  @@map("sys_operation_log")
  @@schema("backend")
}

enum MenuType {
  directory
  menu
  lowcode

  @@schema("backend")
}

model SysMenu {
  id        Int      @id @default(autoincrement())
  menuType  MenuType @map("menu_type")
  menuName  String   @map("menu_name") @db.VarChar(64)
  iconType  Int?     @default(1) @map("icon_type")
  icon      String?  @map("icon") @db.VarChar(64)
  routeName String   @unique @map("route_name") @db.VarChar(64)
  routePath String   @map("route_path") @db.VarChar(128)
  component String   @map("component") @db.VarChar(64)
  pathParam String?  @map("path_param") @db.VarChar(64)
  status    Status

  activeMenu String?  @map("active_menu") @db.VarChar(64)
  hideInMenu Boolean? @default(false) @map("hide_in_menu")
  pid        Int      @default(0)
  order      Int      @map("sequence")
  i18nKey    String?  @map("i18n_key") @db.VarChar(64)
  keepAlive  Boolean? @default(false) @map("keep_alive")
  constant   Boolean  @default(false)
  href       String?  @map("href") @db.VarChar(64)
  multiTab   Boolean? @default(false) @map("multi_tab")

  // 低代码菜单相关字段
  lowcodePageId String? @map("lowcode_page_id") @db.VarChar(36)

  // 关联到低代码页面
  lowcodePage SysLowcodePage? @relation(fields: [lowcodePageId], references: [id], onDelete: SetNull)

  createdAt DateTime  @default(now()) @map("created_at")
  createdBy String    @map("created_by")
  updatedAt DateTime? @updatedAt @map("updated_at")
  updatedBy String?   @map("updated_by")

  @@map("sys_menu")
  @@schema("backend")
}

model SysRoleMenu {
  roleId String @map("role_id")
  menuId Int    @map("menu_id")
  domain String

  @@id([roleId, menuId, domain])
  @@map("sys_role_menu")
  @@schema("backend")
}

// 低代码页面表
model SysLowcodePage {
  id          String    @id @default(uuid())
  name        String    @map("name") @db.VarChar(100)
  title       String    @map("title") @db.VarChar(100)
  code        String    @unique @map("code") @db.VarChar(100)
  description String?   @map("description") @db.Text
  schema      Json      @map("schema") // AMIS JSON Schema
  status      Status    @default(ENABLED)
  createdAt   DateTime  @default(now()) @map("created_at")
  createdBy   String    @map("created_by")
  updatedAt   DateTime? @updatedAt @map("updated_at")
  updatedBy   String?   @map("updated_by")

  // 页面版本历史记录
  versions SysLowcodePageVersion[]

  // 关联的菜单
  menus SysMenu[]

  @@map("sys_lowcode_page")
  @@schema("backend")
}

// 低代码页面版本表
model SysLowcodePageVersion {
  id          String   @id @default(uuid())
  pageId      String   @map("page_id")
  version     String   @map("version") @db.VarChar(20)
  schema      Json     @map("schema") // AMIS JSON Schema
  changelog   String?  @map("changelog") @db.Text
  createdAt   DateTime @default(now()) @map("created_at")
  createdBy   String   @map("created_by")

  // 关联到页面
  page SysLowcodePage @relation(fields: [pageId], references: [id], onDelete: Cascade)

  @@map("sys_lowcode_page_version")
  @@schema("backend")
}

model SysAccessKey {
  id              String   @id @default(cuid())
  domain          String
  AccessKeyID     String   @unique @map("access_key_id")
  AccessKeySecret String   @unique @map("access_key_secret")
  status          Status
  description String?
  createdAt       DateTime @default(now()) @map("created_at")
  createdBy       String   @map("created_by")

  @@map("sys_access_key")
  @@schema("backend")
}

// 低代码项目表
model LowcodeProject {
  id          String   @id @default(uuid())
  name        String   @map("name") @db.VarChar(100)
  code        String   @unique @map("code") @db.VarChar(100)
  description String?  @map("description") @db.Text
  framework   String   @map("framework") @db.VarChar(50)
  language    String   @map("language") @db.VarChar(50)
  database    String   @map("database") @db.VarChar(50)
  status      Status   @default(ENABLED)
  config      Json?    @map("config")
  createdAt   DateTime @default(now()) @map("created_at")
  createdBy   String   @map("created_by")
  updatedAt   DateTime? @updatedAt @map("updated_at")
  updatedBy   String?   @map("updated_by")

  @@map("lowcode_project")
  @@schema("backend")
}

// Enterprise, Tenant, AppSpace, UserGroup for multi-tenancy

model Enterprise {
  id          String   @id @default(cuid())
  name        String   @unique
  description String?
  status      Status   @default(ENABLED)
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  tenants Tenant[]

  @@map("enterprise")
  @@schema("backend")
}

model Tenant {
  id           String   @id @default(cuid())
  name         String
  description  String?
  status       Status   @default(ENABLED)
  enterpriseId String   @map("enterprise_id")
  planId       String?  @map("plan_id")
  createdAt    DateTime @default(now()) @map("created_at")
  updatedAt    DateTime @updatedAt @map("updated_at")

  enterprise Enterprise @relation(fields: [enterpriseId], references: [id])
  plan       Plan?      @relation(fields: [planId], references: [id])
  appSpaces  AppSpace[]
  userGroups UserGroup[]
  users      SysUser[]

  @@unique([enterpriseId, name])
  @@map("tenant")
  @@schema("backend")
}

model AppSpace {
  id          String   @id @default(cuid())
  name        String
  description String?
  status      Status   @default(ENABLED)
  tenantId    String   @map("tenant_id")
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  tenant Tenant @relation(fields: [tenantId], references: [id])

  @@unique([tenantId, name])
  @@map("app_space")
  @@schema("backend")
}

model UserGroup {
  id          String   @id @default(cuid())
  name        String
  description String?
  tenantId    String   @map("tenant_id")
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  tenant Tenant @relation(fields: [tenantId], references: [id])

  @@unique([tenantId, name])
  @@map("user_group")
  @@schema("backend")
}

model Plan {
  id              String   @id @default(cuid())
  name            String   @unique
  description     String?
  maxUsers        Int      @map("max_users")
  maxAppSpaces    Int      @map("max_app_spaces")
  pricePerMonth   Float    @map("price_per_month")
  pricePerYear    Float    @map("price_per_year")
  features        Json
  status          Status   @default(ENABLED)
  createdAt       DateTime @default(now()) @map("created_at")
  updatedAt       DateTime @updatedAt @map("updated_at")

  tenants Tenant[]

  @@map("plan")
  @@schema("backend")
}
